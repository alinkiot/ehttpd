-module(iot_{{ mod }}_handler).
-behavior(ehttpd_rest).

-ehttpd_rest({{ name }}).

%% API
-export([swagger_{{ mod }}/0]).
-export([handle/4]).

swagger({{ name }}) ->
    [
        ehttpd_server:bind(<<"/swagger_{{ mod }}.json">>, ?MODULE, [], priv)
    ].

-spec handle(OperationID :: atom(), Args :: map(), Context :: map(), Req :: ehttpd_req:req()) ->
    {Status :: ehttpd_req:http_status(), Body :: map()} |
    {Status :: ehttpd_req:http_status(), Headers :: map(), Body :: map()} |
    {Status :: ehttpd_req:http_status(), Headers :: map(), Body :: map(), Req :: ehttpd_req:req()}.

handle(OperationID, Args, Context, Req) ->
    Headers = #{},
    case do_request(OperationID, Args, Context, Req) of
        {error, Reason} ->
            Err = list_to_binary(io_lib:format("~p", [Reason])),
            {500, Headers, #{ <<"error">> => Err }};
        ok ->
            {200, Headers, #{}, Req};
        {ok, Res} ->
            logger:info("do request: ~p, ~p ->~p~n", [OperationID, Args, Res]),
            {200, Headers, Res, Req};
        {Status, Res} ->
            {Status, Headers, Res, Req};
        {Status, NewHeaders, Res} ->
            {Status, maps:merge(Headers, NewHeaders), Res, Req};
        {Status, NewHeaders, Res, NewReq} ->
            {Status, maps:merge(Headers, NewHeaders), Res, NewReq}
    end.


{% for api in apis %}
%% {{ api.tags }} summary:{{ api.summary }} desc:{{ api.description }}
%% OperationId:{{ api.operationid }}
%% {{ api.method }} {{ api.path }}
do_request({{ api.operationid }}, _Args, Context, _Req) ->
    Response = maps:get(check_response, Context, #{}),
    % @todo 自己实现函数
    {200, Response};
{% endfor %}

do_request(_OperationId, _Args, _Context, _Req) ->
    {error, <<"Not Allowed.">>}.
